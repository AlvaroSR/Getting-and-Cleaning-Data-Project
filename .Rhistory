datitos<-subset(datitos,datitos[,a]==encontrado)
}
if(nrow(datitos)>1){
datitos<-datitos[order(datitos[,2]),]
datitos<-datitos[1,]
}
result<-as.vector(datitos[2])
result<-as.character(result)
result
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
a
a
a
a
a
a
a
a
data<-read.csv("outcome-of-care-measures.csv",colClasses="character")
statecorr<-state==data[,7]
statecorr<-as.numeric(statecorr)
if(sum(statecorr)==0){stop("invalid state")}
outcomecorr<-ifelse(outcome%in%c("heart attack","heart failure","pneumonia"),1,0)
if(outcomecorr==0){stop("invalid outcome")}
if(outcome=="heart attack"){a=11}
if(outcome=="heart failure"){a=17}
if (outcome=="pneumonia"){a=23}
data[,a]<-as.numeric(data[,a])
ff<-complete.cases(data[,a])
data<-data[ff,]
#datitos<-tapply(data[,a],data[,7],min,na.rm=TRUE)
datitos<-subset(data,data[,7]==state)
if(num=="best"){
encontrado<-min(datitos[,a])
datitos<-subset(datitos,datitos[,a]==encontrado)
} else if(num=="worst"){
encontrado<-max(datitos[,a])
datitos<-subset(datitos,datitos[,a]==encontrado)
} else {
unicos<-sort(unique(datitos[,a]))
encontrado<-(unicos[num])
datitos<-subset(datitos,datitos[,a]==encontrado)
}
if(nrow(datitos)>1){
datitos<-datitos[order(datitos[,2]),]
datitos<-datitos[1,]
}
result<-as.vector(datitos[2])
result<-as.character(result)
result
num=4
data<-read.csv("outcome-of-care-measures.csv",colClasses="character")
statecorr<-state==data[,7]
statecorr<-as.numeric(statecorr)
if(sum(statecorr)==0){stop("invalid state")}
outcomecorr<-ifelse(outcome%in%c("heart attack","heart failure","pneumonia"),1,0)
if(outcomecorr==0){stop("invalid outcome")}
if(outcome=="heart attack"){a=11}
if(outcome=="heart failure"){a=17}
if (outcome=="pneumonia"){a=23}
data[,a]<-as.numeric(data[,a])
ff<-complete.cases(data[,a])
data<-data[ff,]
#datitos<-tapply(data[,a],data[,7],min,na.rm=TRUE)
datitos<-subset(data,data[,7]==state)
if(num=="best"){
encontrado<-min(datitos[,a])
datitos<-subset(datitos,datitos[,a]==encontrado)
} else if(num=="worst"){
encontrado<-max(datitos[,a])
datitos<-subset(datitos,datitos[,a]==encontrado)
} else {
unicos<-sort(unique(datitos[,a]))
encontrado<-(unicos[num])
datitos<-subset(datitos,datitos[,a]==encontrado)
}
if(nrow(datitos)>1){
datitos<-datitos[order(datitos[,2]),]
datitos<-datitos[1,]
}
result<-as.vector(datitos[2])
result<-as.character(result)
result
source('/media/DATA2/cursos/R/R programing/Week 4/rankhospital.R')
source('/media/DATA2/cursos/R/R programing/Week 4/rankhospital.R')
source('/media/DATA2/cursos/R/R programing/Week 4/rankhospital.R')
data<-read.csv("outcome-of-care-measures.csv",colClasses="character")
statecorr<-state==data[,7]
statecorr<-as.numeric(statecorr)
if(sum(statecorr)==0){stop("invalid state")}
outcomecorr<-ifelse(outcome%in%c("heart attack","heart failure","pneumonia"),1,0)
if(outcomecorr==0){stop("invalid outcome")}
if(outcome=="heart attack"){a=11}
if(outcome=="heart failure"){a=17}
if (outcome=="pneumonia"){a=23}
data[,a]<-as.numeric(data[,a])
ff<-complete.cases(data[,a])
data<-data[ff,]
#datitos<-tapply(data[,a],data[,7],min,na.rm=TRUE)
datitos<-subset(data,data[,7]==state)
if(num=="best"){
encontrado<-min(datitos[,a])
datitos<-subset(datitos,datitos[,a]==encontrado)
} else if(num=="worst"){
encontrado<-max(datitos[,a])
datitos<-subset(datitos,datitos[,a]==encontrado)
} else {
unicos<-sort(datitos[,a])
encontrado<-(unicos[num])
datitos<-subset(datitos,datitos[,a]==encontrado)
}
if(nrow(datitos)>1){
datitos<-datitos[order(datitos[,2]),]
datitos<-datitos[1,]
}
result<-as.vector(datitos[2])
result<-as.character(result)
result
datitos<-datitos[order(datitos[,a]),]
data<-read.csv("outcome-of-care-measures.csv",colClasses="character")
statecorr<-state==data[,7]
statecorr<-as.numeric(statecorr)
if(sum(statecorr)==0){stop("invalid state")}
outcomecorr<-ifelse(outcome%in%c("heart attack","heart failure","pneumonia"),1,0)
if(outcomecorr==0){stop("invalid outcome")}
if(outcome=="heart attack"){a=11}
if(outcome=="heart failure"){a=17}
if (outcome=="pneumonia"){a=23}
data[,a]<-as.numeric(data[,a])
ff<-complete.cases(data[,a])
data<-data[ff,]
#datitos<-tapply(data[,a],data[,7],min,na.rm=TRUE)
datitos<-subset(data,data[,7]==state)
datitos<-datitos[order(datitos[,a]),]
View(datitos)
source('/media/DATA2/cursos/R/R programing/Week 4/rankhospital.R')
source('/media/DATA2/cursos/R/R programing/Week 4/rankhospital.R')
datitos<-datitos[num,]
result<-as.vector(datitos[2])
result<-as.character(result)
result
datitos<-subset(data,data[,7]==state)
datitos<-datitos[order(datitos[,a]),]
View(datitos)
source('/media/DATA2/cursos/R/R programing/Week 4/rankhospital.R')
datitos<-datitos[order(datitos[,a],datitos[,2]),]
View(datitos)
source('/media/DATA2/cursos/R/R programing/Week 4/rankhospital.R')
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
nrows(datitos)
nrow(datitos)
source('/media/DATA2/cursos/R/R programing/Week 4/rankhospital.R')
rankhospital("MN", "heart attack", 5000)
source('/media/DATA2/cursos/R/R programing/Week 4/rankhospital.R')
rankhospital("MN", "heart attack", 5000)
source('/media/DATA2/cursos/R/R programing/Week 4/rankhospital.R')
rankhospital("MN", "heart attack", 5000)
rankhospital("MN", "heart attack", 300)
rankhospital("MN", "heart attack", 295)
rankhospital("MN", "heart attack", 294)
rankhospital("MN", "heart attack", 197)
rankhospital("MN", "heart attack", 50)
rankhospital("MN", "heart attack", 40)
rankhospital("MN", "heart attack", 1)
rankhospital("MN", "heart attack", 10)
rankhospital("MN", "heart attack", 15)
rankhospital("MN", "heart attack", 30)
rankhospital("MN", "heart attack", 39)
rankhospital("MN", "heart attack", 50)
rankhospital("MN", "heart attack", 42)
rankhospital("MN", "heart attack", 40)
rankhospital("MN", "heart attack", 39)
rankhospital("MN", "heart attack", "worst")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
submit()
rankhospital("NY", "heart attak", 7)
rankhospital("WA", "pneumonia", 1000)
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
source('/media/DATA2/cursos/R/R programing/Week 4/rankhospital.R')
order()
order
data<-read.csv("outcome-of-care-measures.csv",colClasses="character")
levels(data[:,7])
level(data[:,7])
data[:,7]
data
levels[data,7]
levels(data[,7])
data[,7]<-factor(data[,7])
levels(data[,7])
states<-levels(data[,7])
states[1]
states[2]
states[3]
states[4]
result<-data.frame(row.names=c("hospital","state"))
View(result)
result[1,1]="vv"
View(result)
result<-data.frame(col.names=c("hospital","state"))
View(result)
result[1,1]="vv"
results<-data.frame(names=c("hospital","state"))
View(results)
result[1,1]="vv"
results[1,1]="vv"
results<-data.frame(hospital,state)
results<-data.frame(hospital=c(1:length(states)),state=c(1:length(states)))
View(results)
View(data)
source('/media/DATA2/cursos/R/R programing/Week 4/rankall.R')
rankall("heart attack",20)
source('/media/DATA2/cursos/R/R programing/Week 4/rankall.R')
rankall("heart attack",20)
data<-read.csv("outcome-of-care-measures.csv",colClasses="character")
outcome="heart attack"
outcomecorr<-ifelse(outcome%in%c("heart attack","heart failure","pneumonia"),1,0)
if(outcomecorr==0){stop("invalid outcome")}
if(outcome=="heart attack"){a=11}
if(outcome=="heart failure"){a=17}
if (outcome=="pneumonia"){a=23}
data[,a]<-as.numeric(data[,a])
ff<-complete.cases(data[,a])
data<-data[ff,]
str(data)
data[,7]<-factor(data[,7])
str(data)
states<-levels(data[,7])
results<-data.frame(hospital=c(1:length(states)),state=c(1:length(states)))
num="best"
for (i in 1:length(states)) {
state<-states[i]
#datitos<-tapply(data[,a],data[,7],min,na.rm=TRUE)
datitos<-subset(data,data[,7]==state)
if(num=="best"){
encontrado<-min(datitos[,a])
datitos<-subset(datitos,datitos[,a]==encontrado)
}else if(num=="worst"){
encontrado<-max(datitos[,a])
datitos<-subset(datitos,datitos[,a]==encontrado)
} else {
if(num>nrow(datitos)){
result=NA
return(result)
}else{
datitos<-datitos[order(datitos[,a],datitos[,2]),]
datitos<-datitos[num,]
}
}
results[i,1]<-as.vector(datitos[2])
results[i,2]<-as.vector(datitos[7])
}
View(datitos)
results[i,1]<-as.vector(datitos[2])
results[i,2]<-as.vector(datitos[7])
View(results)
results[i,2]<-datitos[7]
View(results)
results[i,1]
results[i,2]
datitos
datitos[7]
as.vector(datitos[7])
results[i,2]<-as.vector(datitos[2])
View(results)
results[i,2]<-as.vector(datitos[7])
View(results)
results[i,2]<-as.factor(datitos[2])
results[i,2]<-states[i]
View(results)
source('/media/DATA2/cursos/R/R programing/Week 4/rankall.R')
source('/media/DATA2/cursos/R/R programing/Week 4/rankall.R')
rankall("heart attack", 20)
source('/media/DATA2/cursos/R/R programing/Week 4/rankall.R')
rankall("heart attack", 20)
datitos<-data.frame(a=1,b=NA)
as.vector(datitos[2])
source('/media/DATA2/cursos/R/R programing/Week 4/rankall.R')
source('/media/DATA2/cursos/R/R programing/Week 4/rankall.R')
rankall("heart attack", 20)
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
source('/media/DATA2/cursos/R/R programing/Week 4/rankall.R')
tail(rankall("pneumonia", "worst"), 3)
f<-rankall("pneumonia", "worst")
View(f)
tail(rankall("heart failure"), 10)
f
data<-read.csv("outcome-of-care-measures.csv",colClasses="character")
View(data)
source('/media/DATA2/cursos/R/R programing/Week 4/rankall.R')
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
source('/media/DATA2/cursos/R/R programing/Week 4/rankall.R')
submit()
submit()
submit()
rnorm(2*2*10)
a<-array(rnorm(2*2*10),c(3,4,5))
a
source('/media/DATA2/cursos/R/R programing/Week 4/rankall.R')
system.time(rankall("heart failure", 10))
times <- rbind( c(1.8, 0.58, 0.0, 0.60), c(2.9, 0.26, 0, 0.26), c(2.7, 0.32, 0, 0.33), c(3.3, 0.228, 0, 0.227), c(4.0, 0.18, 0, 0.19))
colnames(times) <- c("CPU GHz", "user", "system", "elapsed" )
plot(times)
source('/media/DATA2/cursos/R/R programing/Week 4/borrar.R')
source('/media/DATA2/cursos/R/R programing/Week 4/borrar.R')
source('/media/DATA2/cursos/R/R programing/Week 4/borrar.R')
source('/media/DATA2/cursos/R/R programing/Week 4/borrar.R')
source('/media/DATA2/cursos/R/R programing/Week 4/borrar.R')
matricita=c(0,1,0)
matricita=c(matricita,matricita,matricita)
makeCacheMatrix(matricita)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(x,y)
y
?ppois
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(x,y)
?rbinom
require(graphics)
# Compute P(45 < X < 55) for X Binomial(100,0.5)
sum(dbinom(46:54, 100, 0.5))
## Using "log = TRUE" for an extended range :
n <- 2000
k <- seq(0, n, by = 20)
plot (k, dbinom(k, n, pi/10, log = TRUE), type = "l", ylab = "log density",
main = "dbinom(*, log=TRUE) is better than  log(dbinom(*))")
lines(k, log(dbinom(k, n, pi/10)), col = "red", lwd = 2)
## extreme points are omitted since dbinom gives 0.
mtext("dbinom(k, log=TRUE)", adj = 0)
mtext("extended range", adj = 0, line = -1, font = 4)
mtext("log(dbinom(k))", col = "red", adj = 1)
install.packages("httr")
oauth_endpoints("twitter")
libarary(httr)
library(httr)
oauth_endpoints("twitter")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "c0fcddd9d7596a679567","5af5a03345655162bbbc238dfe3706acf77bfda8")
myapp
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req<-GET("https://api.github.com/users/jtleek/repos",gtoken)
content(req)
oauth_endpoints("github")
myapp <- oauth_app("github", "c0fcddd9d7596a679567","5af5a03345655162bbbc238dfe3706acf77bfda8")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
oauth_endpoints("github")
myapp <- oauth_app("github", "c0fcddd9d7596a679567","5af5a03345655162bbbc238dfe3706acf77bfda8")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req<-GET("https://api.github.com/users/jtleek/repos",gtoken)
stop_for_status(req)
content(req)
json2<-jsonlite::fromJSON(toJSON(json1))
install.packages("jsonlite")
json1<-content(req)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "c0fcddd9d7596a679567","5af5a03345655162bbbc238dfe3706acf77bfda8")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req<-GET("https://api.github.com/users/jtleek/repos",gtoken)
stop_for_status(req)
json1<-content(req)
json2<-jsonlite::fromJSON(toJSON(json1))
library(jsonlite)
s
json2<-jsonlite::fromJSON(toJSON(json1))
View(json2)
names(json2)
json2$created_at
json2[1,2:3]
json2[1,2:30]
View(json2)
json
json2
str(json2)
json2<-data.frame(json2)
str(json2)
View(json2)
json2[,names=="datasharing"]
json2[,json2$names=="datasharing"]
View(json2)
json2<-jsonlite::fromJSON(toJSON(json1))
json2[,json2$names=="datasharing"]
json2[names=="datasharing"]
json2[,names=="datasharing"]
library(dplyr)
json2<-filter(json2,names=="datasharing")
json2<-jsonlite::fromJSON(toJSON(json1))
json2<-filter(json2,names=="datasharing")
json2<-data.frame(json2)
json2<-filter(json2,names=="datasharing")
json2[json2$names=="datasharing"]
View(json2)
json2[json2$name=="datasharing"]
json2[,json2$name=="datasharing"]
json2<-jsonlite::fromJSON(toJSON(json1))
json2<-filter(json2,names=="datasharing")
json2<-filter(json2,name=="datasharing")
json2<-jsonlite::fromJSON(toJSON(json1))
json2<-filter(json2,name=="datasharing")
json2<-data.frame(json2)
json2<-filter(json2,name=="datasharing")
json2<-jsonlite::fromJSON(toJSON(json1))
json2[json2$name=="datasharing"]
json2[1]
json2[1,3:4]
summary(json2)
---
################################################################################
## This file corresponds to PGetting and Cleaning Data Course Project
#
# Álvaro Sánchez February-2015
################################################################################
setwd("/media/DATA2/cursos/R/Getting and Cleaning Data/Getting and Cleaning Data Project/")
library(data.table)
# 1. Merges the training an the test sets to create one data set
#1.1 test
subject.test<-data.table(subject=read.table("./UCI HAR Dataset/test/subject_test.txt"))
X.test<- data.table(read.table("./UCI HAR Dataset/test/X_test.txt",
stringsAsFactors=FALSE))
Y.test<- data.table(activity=read.table("./UCI HAR Dataset/test/y_test.txt"))
test<-data.table(subject.test,Y.test,X.test)
rm(subject.test,X.test,Y.test)
#1.2 train
subject.train<-data.table(subject=read.table("./UCI HAR Dataset/train/subject_train.txt"))
X.train<- data.table(read.table("./UCI HAR Dataset/train/X_train.txt",
stringsAsFactors=FALSE))
Y.train<- data.table(activity=read.table("./UCI HAR Dataset/train/y_train.txt"))
train<-data.table(subject.train,Y.train,X.train)
rm(subject.train,X.train,Y.train)
# 1.3 merge
data<-rbind(test,train)
rm(test,train)
# 2. Extracts only the measurements on the mean and standard deviation for each
#    measurement.
variables<-data.table(read.table("./UCI HAR Dataset/features.txt",
stringsAsFactors=FALSE))
ind<-variables[,V2 %like% "mean\\(\\)|std\\(\\)"]
variables<-variables[ind,]
ind2<-as.vector(paste("V",variables$V1,sep=""))
ind2<-c("subject.V1","activity.V1",ind2)
data<-data[,ind2,with=FALSE]
rm(ind,ind2)
# 3. Uses descriptive activity names to name the activities in the data set
library(plyr)
activity_labels<-fread("./UCI HAR Dataset/activity_labels.txt")
data$activity.V1<-as.factor(mapvalues(data$activity.V1,from=activity_labels$V1,
to=activity_labels$V2))
data$subject.V1<-as.factor(data$subject.V1)
# 4. Appropriately labels the data set with descriptive variable names
variables$V2<- gsub("\\(|\\)", "", variables$V2)
names<-as.vector(c("subject","activity",tolower(variables$V2)))
setnames(data,names)
write.table(data,"./clean_data.txt")
rm(activity_labels,variables,names)
# 5. From the data set in step 4, creates a second, independent tidy data set
#    with the average of each variable for each activity and each subject
data2<-data.frame(data)
data2$subject<-as.factor(data2$subject)
activitylevels<-levels(data2$activity)
subjectlevels<-unique(data2$subject)
activity<-rep(activitylevels,length(subjectlevels))
subject<-rep(subjectlevels,length(activitylevels))
subject<-sort(subject)
tidydata<-matrix(0,nrow=(length(activity)),ncol=ncol(data2))
tidydata<-as.data.frame(tidydata)
setnames(tidydata,names(data2))
tidydata$activity<-activity
tidydata$subject<-subject
for (i in 3:ncol(data2)){
dat <- tapply(data2[,i],list(data2$activity,data2$subject),mean,na.rm=T)
dat<-as.vector(dat)
tidydata[,i]<-dat
}
rm(activity,activitylevels,dat,i,subject,subjectlevels)
write.table(tidydata,"./tidy_data.txt",row.names=FALSE)
View(tidydata)
activity_labels<-fread("./UCI HAR Dataset/activity_labels.txt")
data$activity.V1<-as.factor(mapvalues(data$activity.V1,from=activity_labels$V1,
to=activity_labels$V2))
data$subject.V1<-as.factor(data$subject.V1)
variables<-data.table(read.table("./UCI HAR Dataset/features.txt",
stringsAsFactors=FALSE))
ind<-variables[,V2 %like% "mean\\(\\)|std\\(\\)"]
variables<-variables[ind,]
View(variables)
install.packages("knitr")
library(knitr)
knit2html("codebook.Rmd");
